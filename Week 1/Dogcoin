// SPDX-License-Identifier: UNLICENSED .

pragma solidity 0.8.18;

contract DogCoin {
    uint256 totalSupply;
    address owner;

    constructor() {
        totalSupply = 2000000;
        owner = msg.sender;
        balances[owner] = totalSupply;
    }

    modifier onlyOwner{
        require(owner == msg.sender);
        _;
    }
    
    struct Payment{
        uint256 amount;
        address recipient;
    }

    event supplyChange(uint256 _changedSupply);
    event transferToken(uint256 amount, address recipient);

    mapping(address => uint256) public balances;
    mapping(address => Payment[]) public payments;



    function TotalSupply() public view returns(uint256) {
        return totalSupply;
    }

    function increaseSupply() public onlyOwner{
        // require(msg.sender == owner, "You are not allowed to change the total supply");
        totalSupply = totalSupply + 1000;
        emit supplyChange(totalSupply);
    }

    function getBalances(address _userAddress) public view returns(uint256) {
        return balances[_userAddress];
    }

    function transfer(uint256 transferAmount, address transferTo) public {
        require(balances[msg.sender] >= transferAmount, "You have insufficient funds!!");
        balances[msg.sender] = balances[msg.sender] - transferAmount;
        balances[transferTo] = balances[transferTo] + transferAmount;
        payments[msg.sender].push(Payment(transferAmount, transferTo));
        emit transferToken(transferAmount, transferTo);
    }
}
